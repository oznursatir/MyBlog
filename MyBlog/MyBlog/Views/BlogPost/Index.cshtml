@model IEnumerable<MyBlog.Models.BlogPost>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

<style>

    .card {
        height: 450px;
        width: 350px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        margin: 15px;
        text-align: center;
        position: relative;
        border-radius: 15px;
        box-shadow: 0 0 25px rgba(0, 0, 0, 0.3)
    }

    .card-body {
        font-family: inherit;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        height: 100%;
    }

    .card-title {
        font-size: 18px;
        margin-bottom: 10px;
    }

    .card-text {
        margin: 0px;
        padding: 0px;
        flex-grow: 1;
        overflow: hidden;
        font-size: 16px;
        line-height: 1.5rem;
        text-align: left;
    }

    .truncate {
        display: -webkit-box;
        -webkit-line-clamp: 5;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .btn {
        position: absolute;
        bottom: 15px;
        right: 15px;
        font-size: 10px;
        border-radius: 50px;
    }

    .image-container {
        width: 100%;
        max-height: 200px;
        overflow: hidden;
    }

        .image-container img {
            width: 100%;
            height: auto;
        }
</style>

<div class="box">


    <div class="container">
        <div class="row">
            @foreach (var post in Model.Reverse())
            {
                var (imageHtml, truncatedContent) = ExtractAndTruncateHtml(post.Content, 200);

                <div class="col-md-4 d-flex align-items-stretch">
                    <div class="card mb-4">
                        <div class="kart">
                            <!-- Kartın üst kısmında resim için yeni div -->
                            <div class="image-container">
                                @Html.Raw(imageHtml)
                            </div>
                            <div class="card-body d-flex flex-column">
                                <p>@post.User.FullName - @post.CreatedAt.ToString("yyyy-MM-dd")</p>

                                <h5 class="card-title">@post.Title</h5>
                                <!-- İçeriğin bulunduğu div -->
                                <div class="card-text flex-grow-1">
                                    @Html.Raw(truncatedContent.TrimStart())
                                </div>

                                <a href="@Url.Action("Details", "BlogPost", new { id = post.Id })" class="btn btn-dark">Devamını Oku</a>

                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@functions {
    public static (string, string) ExtractAndTruncateHtml(string input, int length)
    {
        if (string.IsNullOrEmpty(input))
        {
            return (string.Empty, string.Empty);
        }

        var doc = new HtmlAgilityPack.HtmlDocument();
        doc.LoadHtml(input);

        var firstImage = doc.DocumentNode.SelectSingleNode("//img");
        string imageHtml = firstImage?.OuterHtml ?? string.Empty;

        if (firstImage != null)
        {
            firstImage.Remove();
        }

        string truncatedContent = doc.DocumentNode.OuterHtml;

        if (truncatedContent.Length > length)
        {
            truncatedContent = truncatedContent.Substring(0, length);
            int lastOpeningTagIndex = truncatedContent.LastIndexOf('<');
            int lastClosingTagIndex = truncatedContent.LastIndexOf('>');

            if (lastOpeningTagIndex > lastClosingTagIndex)
            {
                int closingTagIndex = input.IndexOf('>', lastOpeningTagIndex);
                if (closingTagIndex != -1)
                {
                    truncatedContent = input.Substring(0, closingTagIndex + 1);
                }
            }

            truncatedContent += "...";
        }

        return (imageHtml, truncatedContent);
    }
}
